 #include <Wire.h>

#include "MAX30100_PulseOximeter.h"

#include <OneWire.h>

#include <DallasTemperature.h>

#include <DHT.h>

#include "thingProperties.h"  // Automatically generated by Arduino IoT Cloud


#define ONE_WIRE_BUS 5         // Pin where the DS18B20 data line is connected

#define DHTPIN 18              // Pin where the DHT11 data line is connected

#define DHTTYPE DHT11          // DHT 11

#define REPORTING_PERIOD_MS 2000  // Reporting period for MAX30100 (2 seconds)


// MAX30100 Oximeter

PulseOximeter pox;

uint32_t lastReportTime = 0;


// DS18B20 Temperature Sensor

OneWire oneWire(ONE_WIRE_BUS);

DallasTemperature sensors(&oneWire);


// DHT11 Sensor

DHT dht(DHTPIN, DHTTYPE);


// Callback function for MAX30100

void onBeatDetected() {

    Serial.println("Beat detected!");

}


void setup() {

    Serial.begin(115200);  // Start serial communication


    // Initialize MAX30100 Pulse Oximeter

    Serial.println("Initializing MAX30100...");

    Wire.begin(21, 22);  // SDA on GPIO 21, SCL on GPIO 22


    if (!pox.begin()) {

        Serial.println("FAILED to initialize MAX30100. Please check wiring.");

        while (1);  // Stop execution if initialization fails

    } else {

        Serial.println("MAX30100 successfully initialized.");

    }


    pox.setOnBeatDetectedCallback(onBeatDetected);


    // Initialize DS18B20

    sensors.begin();

    Serial.println("DS18B20 Temperature Sensor Initialized.");


    // Initialize DHT11

    dht.begin();

    Serial.println("DHT11 Sensor Initialized.");

  

    // Arduino Cloud initialization

    initProperties();

    ArduinoCloud.begin(ArduinoIoTPreferredConnection);

    setDebugMessageLevel(2); // Debug level

    ArduinoCloud.printDebugInfo(); // Print debug info

}


void loop() {

    // Update the Arduino IoT Cloud

    ArduinoCloud.update();


    // Update MAX30100 Pulse Oximeter

    pox.update();


    // Reporting data every two seconds

    if (millis() - lastReportTime > REPORTING_PERIOD_MS) {

        lastReportTime = millis();


        // Check if MAX30100 is still initialized and valid

        float currentHeartRate = pox.getHeartRate();

        float currentSpO2 = pox.getSpO2();


        // Report MAX30100 Heart Rate and SpO2

        if (currentHeartRate > 0 && currentSpO2 > 0) {

            // Report readings

            Serial.print("Heart rate: ");

            Serial.print(currentHeartRate);

            Serial.print(" bpm / SpO2: ");

            Serial.print(currentSpO2);

            Serial.println(" %");


            // Update cloud variables

            heartRate = currentHeartRate;        // Update heart rate variable for Arduino Cloud

            bloodOxygen = currentSpO2;           // Update blood oxygen variable for Arduino Cloud

        } else {

            Serial.println("MAX30100 failed or disconnected. Re-initializing...");

            if (pox.begin()) {

                Serial.println("MAX30100 successfully re-initialized.");

            } else {

                Serial.println("FAILED to re-initialize MAX30100.");

            }

        }


        // Read temperature from DS18B20

        sensors.requestTemperatures();

        float temperatureC = sensors.getTempCByIndex(0);

        if (temperatureC != DEVICE_DISCONNECTED_C) {

            // Convert to Fahrenheit

            float temperatureF = temperatureC * 9.0 / 5.0 + 32.0;

            Serial.print("DS18B20 Temperature: ");

            Serial.print(temperatureF);

            Serial.println(" °F");


            // Update cloud variable for body temperature

            bodyTemp = temperatureF; // Update body temperature variable for Arduino Cloud

        } else {

            Serial.println("Error reading DS18B20 temperature!");

        }


        // Read temperature and humidity from DHT11

        float h = dht.readHumidity();

        float t = dht.readTemperature();


        if (isnan(h) || isnan(t)) {

            Serial.println("Failed to read from DHT11 sensor!");

        } else {

            Serial.print("DHT11 Humidity: ");

            Serial.print(h);

            Serial.print(" %\t");

            Serial.print("DHT11 Temperature: ");

            Serial.print(t);  // Keep DHT11 temperature in Celsius

            Serial.println(" °C");


            // Update cloud variable for humidity

            humidity = h; // Update humidity variable for Arduino Cloud

        }

    }

}
